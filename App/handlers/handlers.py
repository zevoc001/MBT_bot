import datetime

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext

import states
import database as db
import keyboard, config, utils
from database import UserNotFound
from config import CANCEL_HOUR_ORDER


router = Router()


@router.message(Command('start'))
@router.message(Command('go_main_menu'))
@router.message(Command('menu'))
async def start(msg: Message):
    try:
        user = await db.get_user(msg.from_user.id)
        if user['access'] == 'admin':
            menu = keyboard.admin_menu_main
        elif user['access'] == 'taskmaster':
            menu = keyboard.user_menu_main
        else:
            menu = keyboard.user_menu_main

        await msg.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=menu)
    except Exception as e:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        menu = [
            [InlineKeyboardButton(text='–ü—Ä–∏—Å—Ç—É–ø–∏–º', callback_data='reg')]
        ]
        menu = InlineKeyboardMarkup(inline_keyboard=menu)

        await msg.answer(
            text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ –ú–æ–ª–æ–¥–µ–∂–Ω–∞—è –ë–∏—Ä–∂–∞ –¢—Ä—É–¥–∞. –ú—ã –ø–æ–º–æ–≥–∞–µ–º –ª—é–¥—è–º –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É. \n\n–î–∞–≤–∞–π—Ç–µ '
                 '–ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –∏ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É.',
            reply_markup=menu)


@router.callback_query(F.data == 'help')
async def go_help(callback: CallbackQuery):
    link = config.HELP_BOT_LINK
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='go_main_menu')]
    ])
    await callback.answer()
    await callback.message.edit_text('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –Ω–∞—à –±–æ—Ç: {}'.format(link), reply_markup=markup)


@router.callback_query(F.data == 'go_menu_admin')
async def go_menu_admin(callback: CallbackQuery):
    menu = keyboard.admin_menu_main

    await callback.answer()
    await callback.message.edit_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=menu)


@router.callback_query(F.data == 'go_workers_menu')
async def go_workers_menu(callback: CallbackQuery):
    menu = keyboard.admin_menu_workers
    await callback.answer()
    await callback.message.edit_text(text='–†–∞–±–æ—á–∏–µ', reply_markup=menu)


@router.callback_query(F.data == 'go_customers_menu')
async def go_customers_menu(callback: CallbackQuery):
    menu = keyboard.admin_menu_customers
    await callback.answer()
    await callback.message.edit_text(text='–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏', reply_markup=menu)


@router.callback_query(F.data == 'go_orders_menu')
async def go_orders_menu(callback: CallbackQuery):
    menu = keyboard.admin_menu_orders
    await callback.answer()
    await callback.message.edit_text(text='–ó–∞–∫–∞–∑—ã', reply_markup=menu)


@router.callback_query(F.data == 'go_others_menu')
async def go_others_menu(callback: CallbackQuery):
    menu = keyboard.admin_menu_others
    await callback.answer()
    await callback.message.edit_text(text='–î—Ä—É–≥–æ–µ', reply_markup=menu)


@router.callback_query(F.data == 'go_menu_find_users')
async def go_menu_find_users(callback: CallbackQuery):
    menu = keyboard.admin_menu_find_users
    await callback.answer()
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞', reply_markup=menu)


@router.callback_query(F.data == 'go_menu_find_customers')
async def go_menu_find_customers(callback: CallbackQuery):
    menu = keyboard.admin_menu_find_customers
    await callback.answer()
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞', reply_markup=menu)


@router.callback_query(F.data == 'go_menu_find_orders')
async def go_menu_find_orders(callback: CallbackQuery):
    menu = keyboard.admin_menu_find_orders
    await callback.answer()
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞', reply_markup=menu)


@router.callback_query(F.data == 'add_customers')
async def add_customers(callback: CallbackQuery):
    menu = keyboard.admin_menu_find_customers
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞', reply_markup=menu)
    await callback.answer()


@router.callback_query(F.data == 'find_users_by_name')
async def find_users_by_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –∏–º—è (—á–∞—Å—Ç—å –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é)')
    await state.set_state(states.FindingUser.waiting_msg)
    await callback.answer()


@router.message(states.FindingUser.waiting_msg)
async def find_user(msg: Message, state: FSMContext):
    users = await db.get_users_by_name(pattern=msg.text)
    users_keyboard = InlineKeyboardBuilder()
    for user in users:
        users_keyboard.button(text=f"{user['name']}", callback_data=f"show_user:{user['id']}")
    users_keyboard.add(
        InlineKeyboardButton(text='üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏—Ö', callback_data='go_menu_find_users'),
        InlineKeyboardButton(text='üìã –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='go_menu_admin')
    )
    users_keyboard.adjust(1)
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=users_keyboard.as_markup())
    await state.set_state(states.FindingUser.waiting_choose)


@router.callback_query(F.data == 'find_users_by_sex')
async def find_users_by_sex(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ú—É–∂—Å–∫–æ–π', callback_data='find_user_by_sex:–ú—É–∂—Å–∫–æ–π'),
         InlineKeyboardButton(text='–ñ–µ–Ω—Å–∫–∏–π', callback_data='find_user_by_sex:–ñ–µ–Ω—Å–∫–∏–π'),]
    ])
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª', reply_markup=markup)
    await callback.answer()


@router.callback_query(F.data.startswith('find_user_by_sex:'))
async def find_user_by_sex(callback: CallbackQuery):
    sex = callback.data.split(':')[1]
    users = await db.get_users_by_sex(sex=sex)
    users_keyboard = InlineKeyboardBuilder()
    for user in users:
        users_keyboard.button(text=f"{user['name']}", callback_data=f"show_user:{user['id']}")
    users_keyboard.add(
        InlineKeyboardButton(text='üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏—Ö', callback_data='go_menu_find_users'),
        InlineKeyboardButton(text='üìã –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='go_menu_admin')
    )
    users_keyboard.adjust(1)
    await callback.answer()
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=users_keyboard.as_markup())


@router.callback_query(F.data == 'find_users_by_age')
async def find_users_by_age(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='18 –∏ —Å—Ç–∞—Ä—à–µ', callback_data='find_user_by_age:>18'),
         InlineKeyboardButton(text='–ú–ª–∞–¥—à–µ 18', callback_data='find_user_by_age:<18'),]
    ])
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=markup)
    await callback.answer()


@router.callback_query(F.data.startswith('find_user_by_age:'))
async def find_user_by_age(callback: CallbackQuery):
    pattern = callback.data.split(':')[1]
    age = int(pattern[1:])
    sign = pattern[:1]
    users = await db.get_users_by_age(age=age, sign=sign)
    users_keyboard = InlineKeyboardBuilder()
    for user in users:
        today = datetime.date.today()
        born_date = datetime.date.fromisoformat(user['born_date'])
        age = int((today - born_date).total_seconds() / 31536000)
        users_keyboard.button(text=f"–í–æ–∑—Ä–∞—Å—Ç: {age}, {user['name']}", callback_data=f"show_user:{user['id']}")
    users_keyboard.add(
        InlineKeyboardButton(text='üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏—Ö', callback_data='go_menu_find_users'),
        InlineKeyboardButton(text='üìã –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='go_menu_admin')
    )
    users_keyboard.adjust(1)
    await callback.answer()
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=users_keyboard.as_markup())


@router.callback_query(F.data.startswith('show_user:'))
async def show_user(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split(':')[1])
    user_data = await db.get_user(user_id)
    msg = await utils.create_profile_mess(user_data)

    markup = InlineKeyboardBuilder()

    markup.button(text='üîô –ù–∞–∑–∞–¥', callback_data='go_menu_find_users')
    if user_data['status'] != 'blocked':
        markup.button(text='–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'block_user:{user_id}')
    else:
        markup.button(text='–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'unblock_user:{user_id}')

    if user_data['access'] != 'foreman':
        markup.button(text='–°–¥–µ–ª–∞—Ç—å –±—Ä–∏–≥–∞–¥–∏—Ä–æ–º', callback_data=f'grow_up_to_foreman:{user_id}')
    if user_data['access'] != 'admin':
        markup.button(text='–°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º', callback_data=f'grow_up_to_admin:{user_id}')
    if user_data['access'] != 'user':
        markup.button(text='–°–¥–µ–ª–∞—Ç—å —Ä–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–º', callback_data=f'grow_up_to_worker:{user_id}')
    markup.adjust(2, repeat=True)
    await callback.answer()
    await callback.message.edit_text(text=msg, reply_markup=markup.as_markup())
    await state.clear()


@router.callback_query(F.data.startswith('block_user:'))
async def block_user(callback: CallbackQuery):
    user_id = int(callback.data.split(':')[1])
    user = await db.get_user(user_id)
    user['status'] = 'blocked'
    await db.update_user(user)
    await callback.answer()
    await callback.message.edit_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')

    markup = keyboard.admin_menu_main
    await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)


@router.callback_query(F.data.startswith('unblock_user:'))
async def unblock_user(callback: CallbackQuery):
    user_id = int(callback.data.split(':')[1])
    user = await db.get_user(user_id)
    user['status'] = ''
    await db.update_user(user)
    await callback.answer()
    await callback.message.edit_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')

    markup = keyboard.admin_menu_main
    await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)


@router.callback_query(F.data.startswith('grow_up_to_worker:'))
async def grow_up_to_foreman(callback: CallbackQuery):
    user_id = int(callback.data.split(':')[1])
    user = await db.get_user(user_id)
    user['access'] = 'worker'
    await db.update_user(user)
    await callback.answer()
    await callback.message.edit_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')

    markup = keyboard.admin_menu_main
    await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)


@router.callback_query(F.data.startswith('grow_up_to_foreman:'))
async def grow_up_to_foreman(callback: CallbackQuery):
    user_id = int(callback.data.split(':')[1])
    user = await db.get_user(user_id)
    user['access'] = 'foreman'
    await db.update_user(user)
    await callback.answer()
    await callback.message.edit_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –±—Ä–∏–≥–∞–¥–∏—Ä–æ–º')

    markup = keyboard.admin_menu_main
    await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)


@router.callback_query(F.data.startswith('grow_up_to_admin:'))
async def grow_up_to_foreman(callback: CallbackQuery):
    user_id = int(callback.data.split(':')[1])
    user = await db.get_user(user_id)
    user['access'] = 'foreman'
    await db.update_user(user)
    await callback.answer()
    await callback.message.edit_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')

    markup = keyboard.admin_menu_main
    await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)


@router.callback_query(F.data == 'show_active_orders')
async def get_active_orders(callback: CallbackQuery):
    orders = await db.get_orders_all()
    active_orders = list(filter(lambda order_data: order_data['status'] != 'Finished', orders))
    if not active_orders:
        await callback.message.answer('–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤')

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    for order in active_orders:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å —Ä–∞–±–æ—á–∏–º–∏
        workers = {column.split('_id_')[1]: user_id for column, user_id in order.items() if column.startswith(
            'worker_telegram_id_')}
        markup = InlineKeyboardBuilder()
        for worker_num, worker_id in workers.items():
            if worker_id is None:
                continue

            markup.add(InlineKeyboardButton(text=f'–†–∞–±–æ—á–∏–π {worker_num}', callback_data=f'user:{worker_id}'))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞
        markup.adjust(1)
        markup.add(InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data=f"finish_order:{order['id']}"))
        order_mess = await utils.create_order_mess_admin(**order)
        await callback.message.answer(order_mess, reply_markup=markup.as_markup())
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith('finish_order:'))
async def finish_order(callback: CallbackQuery):
    order_id = int(callback.data.split(':')[1])
    await db.finish_order(order_id)
    await callback.answer()
    await callback.message.answer(f'–ó–∞–∫–∞–∑ ‚Ññ{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω')


@router.callback_query(F.data == 'add_order')
async def create_offer(callback: CallbackQuery, state: FSMContext):
    await state.set_data({})
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üîç –ù–∞–π—Ç–∏', callback_data='find_employer'),
         InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ', callback_data='add_employer')],
    ])
    await callback.message.edit_text(text='–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ?', reply_markup=markup)
    await state.set_state(states.CreatingOrder.waiting_employer)


@router.callback_query(F.data == 'save_order')
async def save_order(callback: CallbackQuery, state: FSMContext):
    order_data = await state.get_data()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    request = {
        'status': 'saved',
        'reg_date': datetime.date.today().isoformat(),
        'manager_id': callback.from_user.id,
        'customer_id': order_data.get('customer_id'),
        'order_date': order_data.get('order_date'),
        'start_time': order_data.get('start_time'),
        'finish_time': order_data.get('finish_time'),
        'transfer_type': order_data.get('transfer_type'),
        'order_cost': order_data.get('order_cost'),
        'leave_place': order_data.get('leave_place'),
        'leave_time': order_data.get('leave_time'),
        'workers_price_hour': order_data.get('workers_price_hour'),
        'need_foreman': order_data.get('need_foreman'),
        'payment_form': order_data.get('payment_form'),
        'break_duration': order_data.get('break_duration'),
        'count_worker': order_data.get('count_worker'),
        'order_place': order_data.get('order_place'),
        'tasks': order_data.get('tasks'),
        'tools': order_data.get('tools'),
        'extra_info': order_data.get('extra_info'),
    }
    order_id = await db.add_order(request)

    await callback.message.edit_text(f'–ó–∞–∫–∞–∑ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
    markup = keyboard.admin_menu_main
    await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)


@router.callback_query(F.data == 'publish_order')
async def publish_order(callback: CallbackQuery, state: FSMContext):
    order_data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –ë–î
    request = {
        'status': 'published_for_foremen' if order_data.get('need_foreman') else 'published_for_workers',
        'reg_date': datetime.date.today().isoformat(),
        'manager_id': callback.from_user.id,
        'customer_id': order_data.get('customer_id'),
        'order_date': order_data.get('order_date'),
        'start_time': order_data.get('start_time'),
        'finish_time': order_data.get('finish_time'),
        'transfer_type': order_data.get('transfer_type'),
        'order_cost': order_data.get('order_cost'),
        'leave_place': order_data.get('leave_place'),
        'leave_time': order_data.get('leave_time'),
        'workers_price_hour': order_data.get('workers_price_hour'),
        'need_foreman': order_data.get('need_foreman'),
        'payment_form': order_data.get('payment_form'),
        'break_duration': order_data.get('break_duration'),
        'count_worker': order_data.get('count_worker'),
        'order_place': order_data.get('order_place'),
        'tasks': order_data.get('tasks'),
        'tools': order_data.get('tools'),
        'extra_info': order_data.get('extra_info'),
    }
    order_id = await db.add_order(request)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    request.update({'order_id': order_id})
    order_mess = await utils.create_order_mess_full(**request)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        users = await db.get_users_all()
        mess = order_mess
        for user in users:
            user_id = user['id']
            await callback.bot.send_message(chat_id=user_id, text=mess)
        await state.clear()
        await callback.message.edit_text(text='–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω')
    except Exception as e:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É', callback_data='send_order'),
             InlineKeyboardButton(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='add_order')]
        ])
        await callback.message.answer(text='–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É',
                                      reply_markup=markup)


@router.callback_query(F.data == 'save_profile')
async def save_profile(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await state.update_data(id=user_id)
    await state.update_data(reg_date=datetime.date.today().isoformat())
    await state.update_data(access='user')
    user_data = await state.get_data()
    print(user_data)

    # –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user = await db.update_user(user=user_data)
        if user['access'] == 'admin':
            menu = keyboard.admin_menu_main
        elif user['access'] == 'taskmaster':
            menu = keyboard.user_menu_main
        else:
            menu = keyboard.user_menu_main
        await callback.message.answer(text='–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
        await callback.message.edit_text(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=menu)

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except UserNotFound:
        await db.add_user(user=user_data)

        menu = keyboard.user_menu_main
        await state.clear()
        await callback.message.edit_text(
            text='–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö.\nVK: https://vk.com/id849751646\n',
            reply_markup=menu)

    # –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    except Exception as e:
        print(e)
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É', callback_data='save_profile'),
             InlineKeyboardButton(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='edit_profile')]
        ])
        await callback.bot.send_message(chat_id=user_id, text='–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è,'
                                                              ' –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å',
                                        reply_markup=markup)
    await callback.answer()


@router.callback_query(F.data == 'show_profile')
async def show_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_data = await db.get_user(user_id)
    mess = await utils.create_profile_mess(user_data)
    markup = keyboard.user_menu_profile
    await callback.message.edit_text(text=mess, reply_markup=markup)


@router.callback_query(F.data == 'get_users_orders')
async def get_users_orders(callback: CallbackQuery):
    user_id = callback.from_user.id
    orders = await db.get_users_orders(user_id)

    for order in orders:
        mess = await utils.create_order_mess_full(**order)
        order_id = order['id']
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data=f'cancel_order:{order_id}')]
        ])
        await callback.message.answer(text=mess)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith('get_order:'))
async def get_order(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data[10:])
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å', callback_data=f'agree_order:{order_id}'),
         InlineKeyboardButton(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data='go_main_menu')]
    ])
    await callback.message.answer(f'–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ ‚Ññ{order_id}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏–µ–º?', reply_markup=markup)
    await callback.answer()


@router.callback_query(F.data.startswith('agree_order:'))
async def agree_order(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(':')[1])
    user_id = callback.from_user.id
    workers = await db.get_order_workers(order_id)
    # –ó–∞–∫—Ä–µ–ø–ª–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞ –∑–∞–∫–∞–∑–æ–º
    if user_id in workers:
        await callback.message.edit_text('–í—ã —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –∑–∞ —ç—Ç–∏–º –∑–∞–∫–∞–∑–æ–º')
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω
    order = await db.get_order(order_id)
    plan_workers = order['count_workers']
    if len(workers) < plan_workers:
        await db.order_add_worker(order_id, user_id)
        await callback.message.answer('–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑. –í –ø–æ–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∂–¥–µ–º –≤–∞—Å –Ω–∞ –º–µ—Å—Ç–µ')
    else:
        await callback.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã')
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith('cancel_order:'))
async def cancel_order(callback: CallbackQuery):
    user_id = callback.from_user.id
    order_id = int(callback.data.split(':')[1])
    order = await db.get_order(order_id)
    try:
        # –†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª–∞ –∑–∞–∫–∞–∑–∞
        today = datetime.datetime.now()
        order_date = datetime.date.fromisoformat(order['order_date'])
        order_start_time = datetime.time.fromisoformat(order['start_time'])
        order_time = datetime.datetime.combine(order_date, order_start_time)
        left_hour = (order_time - today).total_seconds() / 3600
        # –ï—Å–ª–∏ –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–ª–æ—Å—å –±–æ–ª–µ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if left_hour >= CANCEL_HOUR_ORDER:
            await db.order_remove_worker(order_id, user_id)
            await callback.message.answer('–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞')
        else:
            await callback.message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ {} —á–∞—Å–∞ –¥–æ –µ–≥–æ –Ω–∞—á–∞–ª–∞. '
                                          '–î–ª—è –æ—Ç–∫–∞–∑–∞, –∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É 8(8652)-222-007'.format(CANCEL_HOUR_ORDER))
    except Exception as e:
        await callback.message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É 8(8652)-222-007')
    await callback.answer()
