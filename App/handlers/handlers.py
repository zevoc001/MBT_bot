import datetime
from App.logger_config import get_logger

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from App import states
from App import database as db
from App import keyboard, text, config, utils
from App.config import CANCEL_HOUR_ORDER


logger = get_logger(__name__)

router = Router()


@router.message(Command('start'))
@router.message(Command('menu'))
async def start(msg: Message):
    user = await db.get_user(msg.from_user.id)

    if not user:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        menu = [
            [InlineKeyboardButton(text='–ü—Ä–∏—Å—Ç—É–ø–∏–º', callback_data='reg')]
        ]
        menu = InlineKeyboardMarkup(inline_keyboard=menu)

        await msg.answer(
            text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ –ú–æ–ª–æ–¥–µ–∂–Ω–∞—è –ë–∏—Ä–∂–∞ –¢—Ä—É–¥–∞. –ú—ã –ø–æ–º–æ–≥–∞–µ–º –ª—é–¥—è–º –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É. \n\n–î–∞–≤–∞–π—Ç–µ '
                 '–ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –∏ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É.',
            reply_markup=menu)
    else:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if user['access'] == 'admin':
            menu = keyboard.admin_menu_main
        elif user['access'] == 'taskmaster':
            menu = keyboard.user_menu_main
        else:
            menu = keyboard.user_menu_main

        await msg.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=menu)


@router.callback_query(F.data == 'help')
async def help(callback: CallbackQuery):
    link = config.HELP_BOT_LINK
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='go_main_menu')]
    ])
    await callback.answer()
    await callback.message.edit_text('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –Ω–∞—à –±–æ—Ç: {}'.format(link), reply_markup=markup)


@router.callback_query(F.data == 'go_menu_admin')
async def go_main_menu(callback: CallbackQuery):
    menu = keyboard.admin_menu_main

    await callback.answer()
    await callback.message.edit_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=menu)


@router.callback_query(F.data == 'go_workers_menu')
async def go_workers_menu(callback: CallbackQuery):
    menu = keyboard.admin_menu_workers
    await callback.answer()
    await callback.message.edit_text(text='–†–∞–±–æ—á–∏–µ', reply_markup=menu)


@router.callback_query(F.data == 'go_customers_menu')
async def go_workers_menu(callback: CallbackQuery):
    menu = keyboard.admin_menu_customers
    await callback.answer()
    await callback.message.edit_text(text='–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏', reply_markup=menu)


@router.callback_query(F.data == 'go_orders_menu')
async def go_workers_menu(callback: CallbackQuery):
    menu = keyboard.admin_menu_orders
    await callback.answer()
    await callback.message.edit_text(text='–ó–∞–∫–∞–∑—ã', reply_markup=menu)


@router.callback_query(F.data == 'go_others_menu')
async def go_workers_menu(callback: CallbackQuery):
    menu = keyboard.admin_menu_others
    await callback.answer()
    await callback.message.edit_text(text='–î—Ä—É–≥–æ–µ', reply_markup=menu)


@router.callback_query(F.data == 'go_menu_find_users')
async def go_workers_menu(callback: CallbackQuery):
    menu = keyboard.admin_menu_find_users
    await callback.answer()
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞', reply_markup=menu)


@router.callback_query(F.data == 'go_menu_find_customers')
async def go_workers_menu(callback: CallbackQuery):
    menu = keyboard.admin_menu_find_customers
    await callback.answer()
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞', reply_markup=menu)


@router.callback_query(F.data == 'go_menu_find_orders')
async def go_workers_menu(callback: CallbackQuery):
    menu = keyboard.admin_menu_find_orders
    await callback.answer()
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞', reply_markup=menu)


@router.callback_query(F.data == 'add_customers')
async def go_workers_menu(callback: CallbackQuery):
    menu = keyboard.admin_menu_find_customers
    await callback.answer()
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞', reply_markup=menu)


@router.callback_query(F.data == 'find_users_by_name')
async def btn_find_user(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –∏–º—è (—á–∞—Å—Ç—å –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é)')
    await state.set_state(states.FindingUser.waiting_msg)
    await callback.answer()


@router.message(states.FindingUser.waiting_msg)
async def find_user(msg: Message, state: FSMContext):
    users = await db.get_users_by_name(pattern=msg.text)
    users_keyboard = InlineKeyboardBuilder()
    for user in users:
        users_keyboard.button(text=f"{user['name']}", callback_data=f"show_user:{user['id']}")
    users_keyboard.add(
        InlineKeyboardButton(text='üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏—Ö', callback_data='find_user'),
        InlineKeyboardButton(text='üìã –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='go_main_menu')
    )
    users_keyboard.adjust(1)
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=users_keyboard.as_markup())
    await state.set_state(states.FindingUser.waiting_choose)


@router.callback_query(F.data == 'find_users_by_sex')
async def btn_find_user(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ú—É–∂—Å–∫–æ–π', callback_data='find_user_by_sex:–ú—É–∂—Å–∫–æ–π'),
         InlineKeyboardButton(text='–ñ–µ–Ω—Å–∫–∏–π', callback_data='find_user_by_sex:–ñ–µ–Ω—Å–∫–∏–π'),]
    ])
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª', reply_markup=markup)
    await callback.answer()


@router.callback_query(F.data.startswith('find_user_by_sex:'))
async def find_user(callback: CallbackQuery):
    sex = callback.data.split(':')[1]
    users = await db.get_users_by_sex(sex=sex)
    users_keyboard = InlineKeyboardBuilder()
    for user in users:
        users_keyboard.button(text=f"{user['name']}", callback_data=f"show_user:{user['id']}")
    users_keyboard.add(
        InlineKeyboardButton(text='üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏—Ö', callback_data='go_menu_find_users'),
        InlineKeyboardButton(text='üìã –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='go_menu_admin')
    )
    users_keyboard.adjust(1)
    await callback.answer()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=users_keyboard.as_markup())


@router.callback_query(F.data == 'find_users_by_age')
async def btn_find_user(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='18 –∏ —Å—Ç–∞—Ä—à–µ', callback_data='find_user_by_age:>18'),
         InlineKeyboardButton(text='–ú–ª–∞–¥—à–µ 18', callback_data='find_user_by_age:<18'),]
    ])
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=markup)
    await callback.answer()


@router.callback_query(F.data.startswith('find_user_by_age:'))
async def find_user(callback: CallbackQuery):
    pattern = callback.data.split(':')[1]
    age = int(pattern[1:])
    sign = pattern[:1]
    users = await db.get_users_by_age(age=age, sign=sign)
    users_keyboard = InlineKeyboardBuilder()
    for user in users:
        today = datetime.date.today()
        born_date = datetime.date.fromisoformat(user['born_date'])
        age = int((today - born_date).total_seconds() / 31536000)
        users_keyboard.button(text=f"–í–æ–∑—Ä–∞—Å—Ç: {age}, {user['name']}", callback_data=f"show_user:{user['id']}")
    users_keyboard.add(
        InlineKeyboardButton(text='üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏—Ö', callback_data='go_menu_find_users'),
        InlineKeyboardButton(text='üìã –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='go_menu_admin')
    )
    users_keyboard.adjust(1)
    await callback.answer()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=users_keyboard.as_markup())


@router.callback_query(F.data.startswith('show_user:'))
async def choose_user(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split(':')[1])
    user_data = await db.get_user(user_id)
    msg = '–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è:\n'
    for key in text.profile_data:
        column = text.profile_data[key]
        value = user_data[key]
        if value is not None:
            if value is True:
                value = '–î–∞'
            if value is False:
                value = '–ù–µ—Ç'
            msg += '\n{0}: {1}'.format(column, value)
    markup = InlineKeyboardBuilder()
    markup.button(text='üîô –ù–∞–∑–∞–¥', callback_data='go_menu_find_users')
    if user_data['status'] != 'blocked':
        markup.button(text='–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'block_user:{user_id}')
    else:
        markup.button(text='–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'unblock_user:{user_id}')
    await callback.answer()
    await callback.message.edit_text(text=msg, reply_markup=markup.as_markup())
    await state.clear()


@router.callback_query(F.data.startswith('block_user:'))
async def block_user(callback: CallbackQuery):
    user_id = int(callback.data.split(':')[1])
    user = await db.get_user(user_id)
    user['status'] = 'blocked'
    await db.update_user(user)
    await callback.answer()
    await callback.message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
    await go_main_menu(callback)


@router.callback_query(F.data.startswith('unblock_user:'))
async def block_user(callback: CallbackQuery):
    user_id = int(callback.data.split(':')[1])
    user = await db.get_user(user_id)
    user['status'] = ''
    await db.update_user(user)
    await callback.answer()
    await callback.message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
    await go_main_menu(callback)


@router.callback_query(F.data == 'show_active_orders')
async def get_active_orders(callback: CallbackQuery):
    orders = await db.get_orders_all()
    active_orders = list(filter(lambda order: order['status'] != 'Finished', orders))
    if not active_orders:
        await callback.message.answer('–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤')

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    for order in active_orders:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å —Ä–∞–±–æ—á–∏–º–∏
        workers = {column.split('_id_')[1]: user_id for column, user_id in order.items() if column.startswith(
            'worker_telegram_id_')}
        markup = InlineKeyboardBuilder()
        for worker_num, worker_id in workers.items():
            if worker_id is None:
                continue

            markup.add(InlineKeyboardButton(text=f'–†–∞–±–æ—á–∏–π {worker_num}', callback_data=f'user:{worker_id}'))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞
        markup.adjust(1)
        markup.add(InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data=f"finish_order:{order['id']}"))
        order_mess = await utils.create_order_mess_admin(**order)
        await callback.message.answer(order_mess, reply_markup=markup.as_markup())
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith('finish_order:'))
async def finish_order(callback: CallbackQuery):
    order_id = int(callback.data.split(':')[1])
    await db.finish_order(order_id)
    await callback.answer()
    await callback.message.answer(f'–ó–∞–∫–∞–∑ ‚Ññ{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω')


@router.callback_query(F.data == 'add_order')
async def create_offer(callback: CallbackQuery, state: FSMContext):
    await state.set_data({})
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üîç –ù–∞–π—Ç–∏', callback_data='find_employer'),
         InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ', callback_data='add_employer')],
    ])
    await callback.message.edit_text(text='–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ?', reply_markup=markup)
    await state.set_state(states.CreatingOrder.waiting_employer)


@router.callback_query(F.data == 'send_order')
async def send_order(callback: CallbackQuery, state: FSMContext):
    order_data = await state.get_data()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    request = {
        'status': 'Active',
        'reg_date': datetime.date.today().isoformat(),
        'manager_id': callback.from_user.id,
        'employer_id': order_data['employer_id'],
        'order_date': order_data['order_date'],
        'tasks': order_data['tasks'],
        'place': order_data['place'],
        'work_form': order_data['work_form'],
        'price_full': order_data['price_full'],
        'payment_form': order_data['payment_form'],
        'need_workers': order_data['need_workers'],
        'tools': order_data['tools'],
        'transfer_type': order_data['transfer_type'],
        'leave_time': order_data['leave_time'],
        'start_time': order_data['start_time'],
        'finish_time': order_data['finish_time'],
        'back_time': order_data['back_time'],
        'is_feed': order_data['is_feed'],
        'clothes': None,
        'add_info': order_data['add_info'],
        'break_time': order_data['break_time'],
        'task_master': None,
        'worker_telegram_id_1': None,
        'worker_telegram_id_2': None,
        'worker_telegram_id_3': None,
        'worker_telegram_id_4': None,
        'worker_telegram_id_5': None,
        'worker_telegram_id_6': None,
        'worker_telegram_id_7': None,
        'worker_telegram_id_8': None,
        'worker_telegram_id_9': None,
        'worker_telegram_id_10': None,
    }

    order_id = await db.add_order(request)
    request.update(order_id)
    order_mess = await utils.create_order_mess_full(**request)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    await callback.message.edit_text(text='–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω')
    await callback.message.answer(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard.main_menu_admin)
    await state.clear()
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        users = await db.get_users_all()
        mess = order_mess
        for user in users:
            user_id = user['id']
            await callback.bot.send_message(chat_id=user_id, text=mess)
        await state.clear()
    except Exception as e:
        logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}')
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É', callback_data='send_order'),
             InlineKeyboardButton(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='btn_create_order')]
        ])
        await callback.message.answer(text='–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É',
                                      reply_markup=markup)
