import datetime
import logging
import re

from jinja2 import Environment, FileSystemLoader
from aiogram import Router, F

from aiogram.types import (Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardRemove,
                           ReplyKeyboardMarkup, KeyboardButton)
from App.states import SendingMessage as StateMsg, FindingUser as StateFindUser, AddingEmployer as StateRegEmployer, CreatingOrder as StateCreateOrder
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import database as db
import keyboard
import utils

router = Router()

pass_markup = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')]
], resize_keyboard=True)


@router.callback_query(F.data == 'find_user')
async def btn_find_user(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –∏–º—è (—á–∞—Å—Ç—å –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é)')
    await state.set_state(StateFindUser.waiting_msg)
    await callback.answer()


@router.message(StateFindUser.waiting_msg)
async def find_user(msg: Message, state: FSMContext):
    users = await db.get_users_by_name(pattern=msg.text)
    users_keyboard = InlineKeyboardBuilder()
    for user in users:
        users_keyboard.button(text=f"{user['name']}", callback_data=f"user:{user['id']}")
    users_keyboard.add(
        InlineKeyboardButton(text='üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏—Ö', callback_data='find_user'),
        InlineKeyboardButton(text='üìã –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='go_main_menu')
    )
    users_keyboard.adjust(1)
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=users_keyboard.as_markup())
    await state.set_state(StateFindUser.waiting_choose)


@router.callback_query(F.data.startswith('user:'))
async def choose_user(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split(':')[1])
    user_data = await db.get_user(user_id)
    msg = await '–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è:\n' + utils.create_profile_mess(user_data)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='go_main_menu'),
         InlineKeyboardButton(text='–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'block_user:{user_id}')]
    ])
    await callback.answer()
    await callback.message.edit_text(text=msg, reply_markup=markup)
    await state.clear()


@router.callback_query(F.data == 'get_active_orders')
async def get_active_orders(callback: CallbackQuery):
    orders = await db.get_orders_all()
    active_orders = list(filter(lambda order: order['status'] != 'Finished', orders))
    if not active_orders:
        await callback.message.answer('–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤')

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    for order in active_orders:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å —Ä–∞–±–æ—á–∏–º–∏
        workers = {column.split('_id_')[1]: user_id for column, user_id in order.items() if column.startswith(
            'worker_telegram_id_')}
        markup = InlineKeyboardBuilder()
        for worker_num, worker_id in workers.items():
            if worker_id is None:
                continue

            markup.add(InlineKeyboardButton(text=f'–†–∞–±–æ—á–∏–π {worker_num}', callback_data=f'user:{worker_id}'))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞
        markup.adjust(1)
        markup.add(InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data=f"finish_order:{order['id']}"))
        order_mess = await utils.create_order_mess_admin(**order)
        await callback.message.answer(order_mess, reply_markup=markup.as_markup())
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith('finish_order:'))
async def finish_order(callback: CallbackQuery):
    order_id = int(callback.data.split(':')[1])
    await db.finish_order(order_id)
    await callback.answer()
    await callback.message.answer(f'–ó–∞–∫–∞–∑ ‚Ññ{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω')


@router.callback_query(F.data == 'send_order')
async def send_order(callback: CallbackQuery, state: FSMContext):
    order_data = await state.get_data()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    request = {
        'status': 'Active',
        'reg_date': datetime.date.today().isoformat(),
        'manager_id': callback.from_user.id,
        'employer_id': order_data['employer_id'],
        'order_date': order_data['order_date'],
        'tasks': order_data['tasks'],
        'place': order_data['place'],
        'work_form': order_data['work_form'],
        'price_full': order_data['price_full'],
        'payment_form': order_data['payment_form'],
        'need_workers': order_data['need_workers'],
        'tools': order_data['tools'],
        'transfer_type': order_data['transfer_type'],
        'leave_time': order_data['leave_time'],
        'start_time': order_data['start_time'],
        'finish_time': order_data['finish_time'],
        'back_time': order_data['back_time'],
        'is_feed': order_data['is_feed'],
        'clothes': None,
        'add_info': order_data['add_info'],
        'break_time': order_data['break_time'],
        'task_master': None,
        'worker_telegram_id_1': None,
        'worker_telegram_id_2': None,
        'worker_telegram_id_3': None,
        'worker_telegram_id_4': None,
        'worker_telegram_id_5': None,
        'worker_telegram_id_6': None,
        'worker_telegram_id_7': None,
        'worker_telegram_id_8': None,
        'worker_telegram_id_9': None,
        'worker_telegram_id_10': None,
    }

    order_id = await db.add_order(request)
    request.update(order_id)
    order_mess = await utils.create_order_mess_full(**request)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    await callback.message.edit_text(text='–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω')
    await callback.message.answer(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard.main_menu_admin)
    await state.clear()
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        users = await db.get_users_all()
        mess = order_mess
        for user in users:
            user_id = user['id']
            await callback.bot.send_message(chat_id=user_id, text=mess)
        await state.clear()
    except Exception as e:
        logging.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}')
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É', callback_data='send_order'),
             InlineKeyboardButton(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='btn_create_order')]
        ])
        await callback.message.answer(text='–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É',
                                      reply_markup=markup)


@router.callback_query(F.data == 'send_mess')
async def btn_send_mess(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å')
    await state.set_state(StateMsg.waiting_msg)
    await callback.answer()


@router.message(StateMsg.waiting_msg)
async def send_mess(msg: Message, state: FSMContext):
    users = await db.get_users_all()
    for user in users:
        user_id = user['id']
        await msg.bot.send_message(chat_id=user_id, text=msg.text)
    await state.clear()
    await msg.answer(text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', reply_markup=keyboard.main_menu_admin)


@router.callback_query(F.data == 'add_employer')
async def waiting_name(callback: CallbackQuery, state: FSMContext):
    await state.set_data({})
    await callback.message.answer('–ö–∞–∫ –∑–æ–≤—É—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞ (–§–ò–û)?')
    await state.set_state(StateRegEmployer.waiting_name)


@router.message(StateRegEmployer.waiting_name)
async def set_name(msg: Message, state: FSMContext):
    await state.update_data(name=msg.text)
    await msg.answer('–ò–∑ –∫–∞–∫–æ–π –æ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏?', reply_markup=pass_markup)
    await state.set_state(StateRegEmployer.waiting_company)


@router.message(StateRegEmployer.waiting_company)
async def set_company(msg: Message, state: FSMContext):
    if msg.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await state.update_data(company_name=None)
    else:
        await state.update_data(company_name=msg.text)
    await msg.answer('–ö–∞–∫–æ–π –∞–¥—Ä–µ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏?', reply_markup=pass_markup)
    await state.set_state(StateRegEmployer.waiting_address)


@router.message(StateRegEmployer.waiting_address)
async def set_address(msg: Message, state: FSMContext):
    if msg.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await state.update_data(company_address=None)
    else:
        await state.update_data(company_address=msg.text)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ (8–•–•–•–•–•–•–•–•–•–•)', reply_markup=ReplyKeyboardRemove())
    await state.set_state(StateRegEmployer.waiting_phone)


@router.message(StateRegEmployer.waiting_phone)
async def set_phone(msg: Message, state: FSMContext):
    pattern = r'\d{10,15}$'
    if not re.match(pattern, msg.text):
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º (8–•–•–•–•–•–•–•–•–•–•)',
                         reply_markup=ReplyKeyboardRemove())
    else:
        await state.update_data(phone=msg.text)
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑—á–∏–∫–µ', reply_markup=pass_markup)
        await state.set_state(StateRegEmployer.waiting_comment)


@router.message(StateRegEmployer.waiting_comment)
async def set_comment(msg: Message, state: FSMContext):
    if msg.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await state.update_data(comment=msg.text)
    else:
        await state.update_data(comment=None)

    employer_data = await state.get_data()
    employer = {
        '–§–ò–û': employer_data['name'],
        '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏': employer_data['company_name'],
        '–ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏': employer_data['company_address'],
        '–¢–µ–ª–µ—Ñ–æ–Ω': employer_data['phone'],
        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏': employer_data['comment']
    }
    mess = '–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞: \n\n'
    for param, value in employer.items():
        if value is None:
            continue
        mess += f'{param}: {value}\n'
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='save_employer'),
         InlineKeyboardButton(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='add_employer')]
    ])
    await msg.answer(mess, reply_markup=markup)


@router.callback_query(F.data == 'add_order')
async def create_offer(callback: CallbackQuery, state: FSMContext):
    await state.set_data({})
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üîç –ù–∞–π—Ç–∏', callback_data='find_employer'),
         InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ', callback_data='add_employer')],
    ])
    await callback.message.edit_text(text='–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ?', reply_markup=markup)
    await state.set_state(StateCreateOrder.waiting_employer)