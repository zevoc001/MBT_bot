import re
import datetime

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import (CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup,
                           KeyboardButton, ReplyKeyboardRemove)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import get_employers_by_name
from states import StateCreateOrder, StateRegEmployer
from utils import time_is_valid, create_order_mess_full

router = Router()


pass_markup = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')]
], resize_keyboard=True)


@router.callback_query(F.data == 'show_orders')
async def show_orders(callback: CallbackQuery, state: FSMContext):
    pass


@router.callback_query(StateCreateOrder.waiting_employer, F.data == 'find_employer')
async def find_employer(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ (—á–∞—Å—Ç—å –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é)')


@router.message(StateCreateOrder.waiting_employer)
async def find_employer(msg: Message, state: FSMContext):
    employers = await get_employers_by_name(pattern=msg.text)
    employers_keyboard = InlineKeyboardBuilder()
    for employer in employers:
        employers_keyboard.button(text=f"{employer['name']}", callback_data=f"employer_{employer['id']}")
    employers_keyboard.add(
        InlineKeyboardButton(text='üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏—Ö', callback_data='find_employer'),
        InlineKeyboardButton(text='üìã –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='go_main_menu')
    )
    employers_keyboard.adjust(1)
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–∞', reply_markup=employers_keyboard.as_markup())


@router.callback_query(StateCreateOrder.waiting_employer, lambda c: c.data.startswith('employer_'))
async def waiting_date_order(callback: CallbackQuery, state: FSMContext):
    employer_id = int(callback.data[9:])
    await state.update_data(employer_id=employer_id)
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–¥–¥.–º–º.–≥–≥–≥–≥)')
    await state.set_state(StateCreateOrder.waiting_date_order)


@router.message(StateCreateOrder.waiting_date_order)
async def waiting_tasks(msg: Message, state: FSMContext):
    date_str = msg.text
    pattern = r'^\d{2}\.\d{2}\.\d{4}$'
    if not re.match(pattern, date_str):
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ —à–∞–±–ª–æ–Ω—É (–¥–¥.–º–º.–≥–≥–≥–≥)')
    else:
        try:
            date = date_str.split('.')
            date = datetime.date(
                int(date[2]),
                int(date[1]),
                int(date[0])
            ).isoformat()
            await state.update_data(order_date=date)
            await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é',
                             reply_markup=ReplyKeyboardRemove())
            await state.set_state(StateCreateOrder.waiting_tasks)
        except Exception:
            await msg.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å')


@router.message(StateCreateOrder.waiting_tasks)
async def waiting_place(msg: Message, state: FSMContext):
    await state.update_data(tasks=msg.text)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã')
    await state.set_state(StateCreateOrder.waiting_place)


@router.message(StateCreateOrder.waiting_place)
async def waiting_tools(msg: Message, state: FSMContext):
    await state.update_data(place=msg.text)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é', reply_markup=pass_markup)
    await state.set_state(StateCreateOrder.waiting_tools)


@router.message(StateCreateOrder.waiting_tools)
async def waiting_work_form(msg: Message, state: FSMContext):
    if msg.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await state.update_data(tools=None)
    else:
        await state.update_data(tools=msg.text)
    markup = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='–¢–æ–ª—å–∫–æ —Ä–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–µ'),
         KeyboardButton(text='–° –±—Ä–∏–≥–∞–¥–∏—Ä–æ–º'),
         KeyboardButton(text='–ì–æ—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞')]
    ], resize_keyboard=True)
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞', reply_markup=markup)
    await state.set_state(StateCreateOrder.waiting_work_form)


@router.message(StateCreateOrder.waiting_work_form)
async def waiting_work_form(msg: Message, state: FSMContext):
    if msg.text not in ['–¢–æ–ª—å–∫–æ —Ä–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–µ', '–° –±—Ä–∏–≥–∞–¥–∏—Ä–æ–º', '–ì–æ—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞']:
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
    else:
        await state.update_data(work_form=msg.text)
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (–±–µ–∑ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è, –≤ —Ä—É–±–ª—è—Ö)',
                         reply_markup=pass_markup)
        await state.set_state(StateCreateOrder.waiting_price_full)


@router.message(StateCreateOrder.waiting_price_full)
async def waiting_price_full(msg: Message, state: FSMContext):
    if not (msg.text.isdigit() or msg.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π')
    else:
        if msg.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            await state.update_data(price_full=None)
        else:
            await state.update_data(price_full=int(msg.text))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —á–∞—Å —Ä–∞–±–æ—Ç—ã (–±–µ–∑ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è, –≤ —Ä—É–±–ª—è—Ö, –Ω–∞ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞)',
                         reply_markup=pass_markup)
        await state.set_state(StateCreateOrder.waiting_price_hour)


@router.message(StateCreateOrder.waiting_price_hour)
async def waiting_price_hour(msg: Message, state: FSMContext):
    if not (msg.text.isdigit() or msg.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π')
    else:
        if msg.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            await state.update_data(price_hour=None)
        else:
            await state.update_data(price_hour=int(msg.text))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        markup = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text='–ù–∞–ª–∏—á–Ω—ã–µ'),
             KeyboardButton(text='–ü–µ—Ä–µ–≤–æ–¥–æ–º'),
             KeyboardButton(text='–ü–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º')]
        ], resize_keyboard=True)
        await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã', reply_markup=markup)
        await state.set_state(StateCreateOrder.waiting_payment_form)


@router.message(StateCreateOrder.waiting_payment_form)
async def waiting_payment_form(msg: Message, state: FSMContext):
    if msg.text not in ['–ù–∞–ª–∏—á–Ω—ã–µ', '–ü–µ—Ä–µ–≤–æ–¥–æ–º', '–ü–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º']:
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
    else:
        await state.update_data(payment_form=msg.text)
        await msg.answer('–°–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–º', reply_markup=ReplyKeyboardRemove())
        await state.set_state(StateCreateOrder.waiting_need_workers)


@router.message(StateCreateOrder.waiting_need_workers)
async def waiting_need_workers(msg: Message, state: FSMContext):
    if not msg.text.isdigit():
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π')
    else:
        await state.update_data(need_workers=msg.text)
        markup = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text='–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ'),
             KeyboardButton(text='–ú–ë–¢'),
             KeyboardButton(text='–ó–∞–∫–∞–∑—á–∏–∫')]
        ], resize_keyboard=True)
        await msg.answer('–ö–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —Ä–∞–±–æ—á–∏–µ –±—É–¥—É—Ç –¥–æ–±–∏—Ä–∞—Ç—å—Å—è?', reply_markup=markup)
        await state.set_state(StateCreateOrder.waiting_transfer_type)


@router.message(StateCreateOrder.waiting_transfer_type)
async def waiting_transfer_type(msg: Message, state: FSMContext):
    if msg.text not in ['–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ', '–ú–ë–¢', '–ó–∞–∫–∞–∑—á–∏–∫']:
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
    else:
        await state.update_data(transfer_type=msg.text)
        await msg.answer('–í–æ —Å–∫–æ–ª—å–∫–æ –±—ã—Ç—å –≤ —Ç–æ—á–∫–µ —Å–±–æ—Ä–∞? (–Ω–∞–ø—Ä–∏–º–µ—Ä 17:00)', reply_markup=ReplyKeyboardRemove())
        await state.set_state(StateCreateOrder.waiting_leave_time)


@router.message(StateCreateOrder.waiting_leave_time)
async def waiting_leave_time(msg: Message, state: FSMContext):
    if time_is_valid(msg.text):
        try:
            time_list = msg.text.split(':')
            time = datetime.time(
                hour=int(time_list[0]),
                minute=int(time_list[1]),
            ).isoformat()
            await state.update_data(leave_time=time)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        except ValueError as e:
            if 'hour' in str(e):
                await msg.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å (–æ—Ç 00 –¥–æ 23)')
            elif 'minute' in str(e):
                await msg.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–∏–Ω—É—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–∏–Ω—É—Ç—É (–æ—Ç 00 –¥–æ 59)')
            else:
                await msg.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å')

    await msg.answer('–í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã? (–Ω–∞–ø—Ä–∏–º–µ—Ä 17:00)', reply_markup=ReplyKeyboardRemove())
    await state.set_state(StateCreateOrder.waiting_start_time)


@router.message(StateCreateOrder.waiting_start_time)
async def waiting_start_time(msg: Message, state: FSMContext):
    try:
        time_list = msg.text.split(':')
        time = datetime.time(
            hour=int(time_list[0]),
            minute=int(time_list[1]),
        ).isoformat()
        await state.update_data(start_time=time)
        await msg.answer('–í–æ —Å–∫–æ–ª—å–∫–æ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã? (–Ω–∞–ø—Ä–∏–º–µ—Ä 17:00)', reply_markup=ReplyKeyboardRemove())
        await state.set_state(StateCreateOrder.waiting_finish_time)
    except Exception:
        await msg.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å')


@router.message(StateCreateOrder.waiting_finish_time)
async def waiting_finish_time(msg: Message, state: FSMContext):
    try:
        time_list = msg.text.split(':')
        if len(time_list) != 2 or not all(x.isdigit() for x in time_list):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM —Ñ–æ—Ä–º–∞—Ç")

        time = datetime.time(
            hour=int(time_list[0]),
            minute=int(time_list[1]),
        ).isoformat()

        await state.update_data(finish_time=time)
        await msg.answer('–í–æ —Å–∫–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä 17:00)', reply_markup=pass_markup)
        await state.set_state(StateCreateOrder.waiting_back_time)

    except ValueError as e:
        if 'hour' in str(e):
            await msg.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å (–æ—Ç 00 –¥–æ 23)')
        elif 'minute' in str(e):
            await msg.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–∏–Ω—É—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–∏–Ω—É—Ç—É (–æ—Ç 00 –¥–æ 59)')
        else:
            await msg.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å')


@router.message(StateCreateOrder.waiting_back_time)
async def waiting_back_time(msg: Message, state: FSMContext):
    if msg.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await state.update_data(back_time=None)
    else:
        try:
            time_list = msg.text.split(':')
            time = datetime.time(
                hour=int(time_list[0]),
                minute=int(time_list[1]),
            ).isoformat()
            await state.update_data(back_time=time)
        except Exception:
            await msg.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å')

    markup = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='–î–∞'),
         KeyboardButton(text='–ù–µ—Ç')]
    ], resize_keyboard=True)
    await msg.answer('–ö–æ—Ä–º—è—Ç –ª–∏ —Ä–∞–±–æ—á–∏—Ö?', reply_markup=markup)
    await state.set_state(StateCreateOrder.waiting_is_feed)


@router.message(StateCreateOrder.waiting_is_feed)
async def waiting_is_feed(msg: Message, state: FSMContext):
    if msg.text not in ['–î–∞', '–ù–µ—Ç']:
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
    else:
        if msg.text == '–î–∞':
            await state.update_data(is_feed=True)
        if msg.text == '–ù–µ—Ç':
            await state.update_data(is_feed=False)
        await msg.answer('–°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –ø–µ—Ä–µ—Ä—ã–≤, –º–∏–Ω—É—Ç', reply_markup=ReplyKeyboardRemove())
        await state.set_state(StateCreateOrder.waiting_break_duration)


@router.message(StateCreateOrder.waiting_break_duration)
async def waiting_break_duration(msg: Message, state: FSMContext):
    if not msg.text.isdigit():
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π')
    else:
        await state.update_data(break_time=int(msg.text))
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', reply_markup=pass_markup)
        await state.set_state(StateCreateOrder.waiting_add_info)


@router.message(StateCreateOrder.waiting_add_info)
async def waiting_add_info(msg: Message, state: FSMContext):
    if msg.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await state.update_data(add_info=None)
    else:
        await state.update_data(add_info=msg.text)

    # –°–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    info = await state.get_data()
    order_mess = await create_order_mess_full(**info)
    await state.update_data(order_mess=order_mess)
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='send_order'),
         InlineKeyboardButton(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='btn_create_order')]
    ])
    await msg.answer(order_mess, reply_markup=markup)
